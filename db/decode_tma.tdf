--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 17.1 cbx_cycloneii 2017:10:25:18:06:53:SJ cbx_lpm_add_sub 2017:10:25:18:06:53:SJ cbx_lpm_compare 2017:10:25:18:06:53:SJ cbx_lpm_decode 2017:10:25:18:06:53:SJ cbx_mgl 2017:10:25:18:08:29:SJ cbx_nadder 2017:10:25:18:06:53:SJ cbx_stratix 2017:10:25:18:06:53:SJ cbx_stratixii 2017:10:25:18:06:53:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_tma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode170w[1..0]	: WIRE;
	w_anode179w[3..0]	: WIRE;
	w_anode196w[3..0]	: WIRE;
	w_anode206w[3..0]	: WIRE;
	w_anode216w[3..0]	: WIRE;
	w_anode226w[3..0]	: WIRE;
	w_anode236w[3..0]	: WIRE;
	w_anode246w[3..0]	: WIRE;
	w_anode256w[3..0]	: WIRE;
	w_anode268w[1..0]	: WIRE;
	w_anode275w[3..0]	: WIRE;
	w_anode286w[3..0]	: WIRE;
	w_anode296w[3..0]	: WIRE;
	w_anode306w[3..0]	: WIRE;
	w_anode316w[3..0]	: WIRE;
	w_anode326w[3..0]	: WIRE;
	w_anode336w[3..0]	: WIRE;
	w_anode346w[3..0]	: WIRE;
	w_data168w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode346w[3..3], w_anode336w[3..3], w_anode326w[3..3], w_anode316w[3..3], w_anode306w[3..3], w_anode296w[3..3], w_anode286w[3..3], w_anode275w[3..3]), ( w_anode256w[3..3], w_anode246w[3..3], w_anode236w[3..3], w_anode226w[3..3], w_anode216w[3..3], w_anode206w[3..3], w_anode196w[3..3], w_anode179w[3..3]));
	w_anode170w[] = ( (w_anode170w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode179w[] = ( (w_anode179w[2..2] & (! w_data168w[2..2])), (w_anode179w[1..1] & (! w_data168w[1..1])), (w_anode179w[0..0] & (! w_data168w[0..0])), w_anode170w[1..1]);
	w_anode196w[] = ( (w_anode196w[2..2] & (! w_data168w[2..2])), (w_anode196w[1..1] & (! w_data168w[1..1])), (w_anode196w[0..0] & w_data168w[0..0]), w_anode170w[1..1]);
	w_anode206w[] = ( (w_anode206w[2..2] & (! w_data168w[2..2])), (w_anode206w[1..1] & w_data168w[1..1]), (w_anode206w[0..0] & (! w_data168w[0..0])), w_anode170w[1..1]);
	w_anode216w[] = ( (w_anode216w[2..2] & (! w_data168w[2..2])), (w_anode216w[1..1] & w_data168w[1..1]), (w_anode216w[0..0] & w_data168w[0..0]), w_anode170w[1..1]);
	w_anode226w[] = ( (w_anode226w[2..2] & w_data168w[2..2]), (w_anode226w[1..1] & (! w_data168w[1..1])), (w_anode226w[0..0] & (! w_data168w[0..0])), w_anode170w[1..1]);
	w_anode236w[] = ( (w_anode236w[2..2] & w_data168w[2..2]), (w_anode236w[1..1] & (! w_data168w[1..1])), (w_anode236w[0..0] & w_data168w[0..0]), w_anode170w[1..1]);
	w_anode246w[] = ( (w_anode246w[2..2] & w_data168w[2..2]), (w_anode246w[1..1] & w_data168w[1..1]), (w_anode246w[0..0] & (! w_data168w[0..0])), w_anode170w[1..1]);
	w_anode256w[] = ( (w_anode256w[2..2] & w_data168w[2..2]), (w_anode256w[1..1] & w_data168w[1..1]), (w_anode256w[0..0] & w_data168w[0..0]), w_anode170w[1..1]);
	w_anode268w[] = ( (w_anode268w[0..0] & data_wire[3..3]), enable_wire);
	w_anode275w[] = ( (w_anode275w[2..2] & (! w_data168w[2..2])), (w_anode275w[1..1] & (! w_data168w[1..1])), (w_anode275w[0..0] & (! w_data168w[0..0])), w_anode268w[1..1]);
	w_anode286w[] = ( (w_anode286w[2..2] & (! w_data168w[2..2])), (w_anode286w[1..1] & (! w_data168w[1..1])), (w_anode286w[0..0] & w_data168w[0..0]), w_anode268w[1..1]);
	w_anode296w[] = ( (w_anode296w[2..2] & (! w_data168w[2..2])), (w_anode296w[1..1] & w_data168w[1..1]), (w_anode296w[0..0] & (! w_data168w[0..0])), w_anode268w[1..1]);
	w_anode306w[] = ( (w_anode306w[2..2] & (! w_data168w[2..2])), (w_anode306w[1..1] & w_data168w[1..1]), (w_anode306w[0..0] & w_data168w[0..0]), w_anode268w[1..1]);
	w_anode316w[] = ( (w_anode316w[2..2] & w_data168w[2..2]), (w_anode316w[1..1] & (! w_data168w[1..1])), (w_anode316w[0..0] & (! w_data168w[0..0])), w_anode268w[1..1]);
	w_anode326w[] = ( (w_anode326w[2..2] & w_data168w[2..2]), (w_anode326w[1..1] & (! w_data168w[1..1])), (w_anode326w[0..0] & w_data168w[0..0]), w_anode268w[1..1]);
	w_anode336w[] = ( (w_anode336w[2..2] & w_data168w[2..2]), (w_anode336w[1..1] & w_data168w[1..1]), (w_anode336w[0..0] & (! w_data168w[0..0])), w_anode268w[1..1]);
	w_anode346w[] = ( (w_anode346w[2..2] & w_data168w[2..2]), (w_anode346w[1..1] & w_data168w[1..1]), (w_anode346w[0..0] & w_data168w[0..0]), w_anode268w[1..1]);
	w_data168w[2..0] = data_wire[2..0];
END;
--VALID FILE
