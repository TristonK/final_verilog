
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module game(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		reg     [6:0]		HEX0,
	output		reg     [6:0]		HEX1,
	output		reg     [6:0]		HEX2,
	output		reg     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// Video-In //////////
	input 		          		TD_CLK27,
	input 		     [7:0]		TD_DATA,
	input 		          		TD_HS,
	output		          		TD_RESET_N,
	input 		          		TD_VS,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,

	//////////// IR //////////
	input 		          		IRDA_RXD,
	output		          		IRDA_TXD
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [6:0] dis;
wire [9:0] h_addr;
wire [9:0] v_addr;
wire [9:0] av_addr;
wire sec_clk;
wire[11:0]black_or_not;
wire [7:0] getascii;
wire [9:0] vd16;
wire [9:0] hd9;
wire [9:0] vy16;
wire [9:0] hy9;
wire newchar_time;
reg [9:0]dis_cnt;
reg [23:0] vga_date;
reg [7:0] newasc;
reg neww;
wire [11:0] raddr;
wire [11:0] waddr;
reg rec [7:0];
reg [6:0] col;



assign VGA_SYNC_N=0;
assign dis=1;
assign vd16=(av_addr-1)/16;
assign vy16=(av_addr-1)%16;
assign hd9=(h_addr-1)/9;
assign hy9=(h_addr-1)%9;
assign av_addr=(v_addr-dis_cnt*dis<0)?(v_addr+dis_cnt*dis)%480+1:(v_addr-dis_cnt*dis)%480+1;
assign raddr=vd16*70+hd9+1;
assign waddr=(dis_cnt-1)/16*70+(col-1)*9+1;
assign LEDR[1]=neww;
//=======================================================
//  Structural coding
//=======================================================
initial 
begin
   dis_cnt=0;
	neww=0;
	col=0;
end


clkgen #(25000000) my_vgaclk(CLOCK_50,SW[2],1'b1,VGA_CLK);


getsec sec_timer(
        .clk(CLOCK_50),
		  .clk_ls(sec_clk)
);

newchar have_newchar(
       .clk(CLOCK_50),
		 .clk_ls(newchar_time)
);

store_asc(
      .clock(CLOCK_50),
		.data(8'h61),
	   .rdaddress(raddr),
	   .wraddress(waddr),
	   .wren(neww),
	   .q(getascii)
);
 
vga_ctrl my_ctr(
		     .pclk(VGA_CLK),
			  .reset(SW[0]),
			  .vga_data(vga_date),
			  .h_addr(h_addr),
			  .v_addr(v_addr),
			  .hsync(VGA_HS),
			  .vsync(VGA_VS),
			  .valid(VGA_BLANK_N),
			  .vga_r(VGA_R),
			  .vga_g(VGA_G),
			  .vga_b(VGA_B)
			  );
			  
vga_fonts get_fonts(
           .address(getascii*16+vy16),
		     .clock(CLOCK_50),
			  .q(black_or_not)
);



always @(posedge sec_clk)
begin
   //LEDR[0]=1;
	if(dis_cnt<10'd480)
	   dis_cnt<=dis_cnt+1;
	else 
	   dis_cnt<=0;
end
		
/*always@(h_addr)
    if(h_addr<10&av_addr<17)
        getascii=8'h61;
	  else 
	     getascii=0;  
*/
always @(posedge CLOCK_50)
  begin
   if(black_or_not[hy9]==1)
	   begin
	   vga_date=24'hffffff;
		end
	else
	   begin
	   vga_date=24'h0;
		end
end		


always @(posedge newchar_time)
  begin
  neww<= ~neww;
  if(neww==1)
   begin
     if(col<70)
	     begin
       col<=col+1;
		 rec[col]<=1;
		 end		 
  end
  end
  

endmodule
